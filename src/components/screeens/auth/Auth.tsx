// src/components/screens/auth/Auth.tsx
import { FC, useEffect, useState } from "react";
import Meta from "@/src/components/ui/Meta";
import Button from "@/src/components/ui/button/Button";
import Heading from "@/src/components/ui/button/Heading";
import { useAuth } from "@/src/hooks/useAuth";
import { useActions } from "@/src/hooks/user.actions";
import { SubmitHandler, useForm } from "react-hook-form";
import Field from "@/src/components/ui/input/Field";
import Spinner from "@/src/components/ui/input/Spinner";
import { validEmail } from "./valid-email";
import { useAuthRedirect } from "./useAuthRedirect";
import { IEmailPassword } from "@/src/store/user/user.interface";

const errorMap: Record<string, string> = {
  "Invalid password": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
  "User not found": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üòï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.",
  "Invalid email": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã üìß",
  // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–µ–π—Å—ã...
};

const Auth: FC = () => {
  useAuthRedirect();

  const { isLoading, error } = useAuth();
  const { login, register: registerAction } = useActions();
  const [type, setType] = useState<"–í—Ö–æ–¥" | "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è">("–í—Ö–æ–¥");

  const {
    register: formRegister,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<IEmailPassword>({ mode: "onChange" });

  const onSubmit: SubmitHandler<IEmailPassword> = (data) => {
    if (type === "–í—Ö–æ–¥") login(data);
    else registerAction(data);
    // –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª—É—á–∏—Ç—Å—è
  };

  // –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—à–∏–±–∫—É
  useEffect(() => {
    reset();
    // –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ —ç–∫—à–µ–Ω clearAuthError()
  }, [type, reset]);

  // –ø–µ—Ä–µ–≤–æ–¥–∏–º backend-–æ—à–∏–±–∫—É –≤ –ø—Ä–∏—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
  const friendlyError = error ? (errorMap[error] || error) : null;

  return (
    <Meta title="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è">
      <section className="flex h-screen">
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="rounded-3xl bg-while shadow-sm p-10 m-auto w-full max-w-md"
        >
          <Heading classname="capitalize text-center mb-4">{type}</Heading>

          {isLoading ? (
            <div className="flex justify-center items-center h-40">
              <Spinner />
            </div>
          ) : (
            <>
              <Field
                {...formRegister("email", {
                  required: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É",
                  pattern: {
                    value: validEmail,
                    message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email-–∞–¥—Ä–µ—Å",
                  },
                })}
                placeholder="–ü–æ—á—Ç–∞"
                error={errors.email?.message}
              />

              <Field
                {...formRegister("password", {
                  required: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å",
                  minLength: { value: 6, message: "–ü–∞—Ä–æ–ª—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" },
                })}
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                error={errors.password?.message}
              />

              {friendlyError && (
                <div className="text-red-500 text-sm mt-2 text-center">
                  {friendlyError}
                </div>
              )}

              <div className="mt-6 flex flex-col items-center">
                <Button type="submit" variant="orange" className="w-full sm:w-auto">
                  {type === "–í—Ö–æ–¥" ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                </Button>

                <button
                  type="button"
                  className="inline-block opacity-50 hover:opacity-75 mt-4 text-sm transition-opacity"
                  onClick={() => setType(type === "–í—Ö–æ–¥" ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í—Ö–æ–¥")}
                >
                  {type === "–í—Ö–æ–¥"
                    ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
                    : "–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏"}
                </button>
              </div>
            </>
          )}
        </form>
      </section>
    </Meta>
  );
};

export default Auth;
