// src/components/explorer/ProductExplorer.tsx
'use client'

import { TypePaginationProducts, IProduct } from "@/src/types/product.interface"
import { FC, useState, useEffect, useRef, useMemo } from "react"
import { useFilters } from "./useFilters"
import { useQuery } from "@tanstack/react-query";
import { ProductService } from "@/src/assets/styles/services/product/product.service"
import Heading from "../ui/button/Heading" // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–æ ui/Heading
import Button from "../ui/button/Button"
import styles from './ProductExplorer.module.scss'
import { cn } from "@/src/utils/cn"
import Catalog from "../ui/catalog/Catalog"
import Pagination from "./pagination/Pagination"
import SortDropdown from "../ui/catalog/SortDropdown" // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–æ ui/SortDropdown
import { EnumProductSort } from "@/src/assets/styles/services/product/product.types" // –£–±—Ä–∞–ª TypeProductDataFilters, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import Filters from "./filters/Filters"
import ProductItemSkeleton from '../ui/catalog/product-item/ProductItemSkeleton';

interface IProductExplorer {
    initialProducts: TypePaginationProducts
}

const MIN_SKELETON_DISPLAY_TIME = 300;
// –£–ë–ò–†–ê–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£ CLIENT_SIDE_ITEMS_PER_PAGE –û–¢–°–Æ–î–ê

const ProductExplorer: FC<IProductExplorer> = ({ initialProducts }) => {
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const { queryParams, updateQueryParams, isFilterUpdated } = useFilters();

    const [isVisuallyLoading, setIsVisuallyLoading] = useState(false);
    const visualLoadingTimerRef = useRef<NodeJS.Timeout | null>(null);
    const prevParamsStringRef = useRef(JSON.stringify(queryParams));
    const [currentPageClient, setCurrentPageClient] = useState(1);

    // --- –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –≠–õ–ï–ú–ï–ù–¢–û–í –ù–ê –ö–õ–ò–ï–ù–¢–°–ö–û–ô –°–¢–†–ê–ù–ò–¶–ï ---
    const itemsPerPageClient = useMemo(() => {
        return isFilterOpen ? 9 : 8; // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –±—ã–ª–æ 8, —Ç–µ–ø–µ—Ä—å 9 –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö
        // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—ã–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 6 (2 —Ä—è–¥–∞ –ø–æ 3), –∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö 9 (3 —Ä—è–¥–∞ –ø–æ 3):
        // return isFilterOpen ? 6 : 9;
        // –¢–≤–æ—ë —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: "–∫–æ–≥–¥–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞—é —Ñ–∏–ª—å—Ç—Ä—ã —Ö–æ—á—É 9 –∏–≥—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        // "–∫–æ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞—é —Ñ–∏–ª—å—Ç—Ä—ã —É –º–µ–Ω—è —Å–∂–∏–º–∞–µ—Ç—Å—è –¥–æ 3 –≤ —à–∏—Ä–∏–Ω—É –∏ –¥–æ 8 –º–∞–∫—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        // –ï—Å–ª–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö —Ç—ã —Ö–æ—á–µ—à—å –¥–æ 8, —Ç–æ:
        // return isFilterOpen ? 8 : 9;
        // –°—É–¥—è –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, —Ç—ã —Ö–æ—á–µ—à—å 9 –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏ –¥–æ 8 –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö (–µ—Å–ª–∏ –∏—Ö 3 –≤ —Ä—è–¥, —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å 3 –∏–ª–∏ 6)
        // –î–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–µ–º: –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç–∫—Ä—ã—Ç—ã (3 –∫–æ–ª–æ–Ω–∫–∏), —Ç–æ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (2 —Ä—è–¥–∞). –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã - 9.
        // –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ, —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ—Ä–µ—Ç—Å—è –¥–ª—è –û–î–ù–û–ô –ö–õ–ò–ï–ù–¢–°–ö–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        // API –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å queryParams.perPage
        return isFilterOpen ? 6 : 9; // <--- –ü–û–ü–†–û–ë–£–ô –¢–ê–ö
    }, [isFilterOpen]);


    const { data: apiResponseData, isFetching, error, isError } = useQuery<TypePaginationProducts, Error>({
        queryKey: ['product-explorer', JSON.stringify(queryParams)],
        queryFn: () => {
            console.log('%c[QUERY FN CALLED]', 'color: lime; font-weight: bold', queryParams);
            setCurrentPageClient(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–æ–≤–æ–º API-–∑–∞–ø—Ä–æ—Å–µ
            return ProductService.getAll(queryParams);
        },
        initialData: initialProducts,
        staleTime: 0,
        gcTime: 5 * 60 * 1000,
        refetchOnWindowFocus: false,
    });

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ itemsPerPageClient
    // (—Ç.–µ. –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–Ω—è–µ—Ç itemsPerPageClient)
    useEffect(() => {
        setCurrentPageClient(1);
    }, [itemsPerPageClient]);


    useEffect(() => {
        const currentParamsString = JSON.stringify(queryParams);
        if (isFetching || (currentParamsString !== prevParamsStringRef.current && isFilterUpdated)) {
            setIsVisuallyLoading(true);
            if (visualLoadingTimerRef.current) clearTimeout(visualLoadingTimerRef.current);
            if (currentParamsString !== prevParamsStringRef.current) prevParamsStringRef.current = currentParamsString;
        }
    }, [queryParams, isFetching, isFilterUpdated]);

    useEffect(() => {
      if (isVisuallyLoading && !isFetching && (apiResponseData || isError)) {
        if (visualLoadingTimerRef.current) clearTimeout(visualLoadingTimerRef.current);
        visualLoadingTimerRef.current = setTimeout(() => {
            setIsVisuallyLoading(false);
            visualLoadingTimerRef.current = null;
        }, MIN_SKELETON_DISPLAY_TIME);
      }
      return () => { if (visualLoadingTimerRef.current) clearTimeout(visualLoadingTimerRef.current); };
    }, [isVisuallyLoading, isFetching, apiResponseData, isError]);


    const allGamesFromApiOrInitial = apiResponseData?.games || initialProducts?.games || [];
    const totalClientItems = allGamesFromApiOrInitial.length;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º itemsPerPageClient –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    const numberClientPages = Math.ceil(totalClientItems / itemsPerPageClient);

    const gamesForCurrentClientPage = useMemo(() => {
        const startIndex = (currentPageClient - 1) * itemsPerPageClient;
        const endIndex = startIndex + itemsPerPageClient;
        return allGamesFromApiOrInitial.slice(startIndex, endIndex);
    }, [allGamesFromApiOrInitial, currentPageClient, itemsPerPageClient]); // –î–æ–±–∞–≤–∏–ª itemsPerPageClient –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏


    const currentSort = (queryParams.sort as EnumProductSort) || EnumProductSort.NEWEST;
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–µ–ª–µ—Ç–æ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–º—É, —Å–∫–æ–ª—å–∫–æ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É API,
    // –∏–ª–∏ itemsPerPageClient, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ. –ù–æ –ª—É—á—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ queryParams.perPage
    const itemsPerPageForSkeleton = Number(queryParams.perPage) || itemsPerPageClient;


    return (
        <>
             <div className="flex flex-col mb-7">
                <Heading>{queryParams.searchTerm ? `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ "${queryParams.searchTerm}"` : 'üéÆ–ò–≥—Ä—ã'}</Heading>
            </div>
            <div className="flex items-center justify-between mb-7">
                <Button variant="white" onClick={() => setIsFilterOpen(!isFilterOpen)} className="transition-colors duration-200">{isFilterOpen ? '–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' : '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'}</Button>
                <SortDropdown sortType={currentSort} setSortType={(value: EnumProductSort) => { if(!isVisuallyLoading) updateQueryParams('sort', value) }} />
            </div>

            <div className={cn(styles.explorer, { [styles.filterOpened]: isFilterOpen })}>
                <aside className={cn("transition-all duration-300 ease-in-out", { "opacity-100 visible translate-x-0": isFilterOpen, "opacity-0 invisible -translate-x-full pointer-events-none": !isFilterOpen && styles.explorer })}>
                    {isFilterOpen && <Filters />}
                </aside>
                <section>
                    {isVisuallyLoading ? (
                        <div className={cn("grid gap-10", { 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3': isFilterOpen, 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4': !isFilterOpen })}>
                            {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–µ–ª–µ—Ç–æ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å itemsPerPageClient –∏–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É perPage */}
                            {Array.from({ length: itemsPerPageForSkeleton }).map((_, index) => (<ProductItemSkeleton key={index} />))}
                        </div>
                    ) : error ? (
                        <div className="text-center text-red-500 my-10">{error.message || '–û—à–∏–±–∫–∞'}</div>
                    ) : (
                        <Catalog games={gamesForCurrentClientPage} isFilterOpen={isFilterOpen} />
                    )}

                    {!isVisuallyLoading && !error && gamesForCurrentClientPage.length > 0 && numberClientPages > 1 && (
                        <Pagination
                            currentPage={currentPageClient.toString()}
                            numberPages={numberClientPages}
                            changePage={page => setCurrentPageClient(Number(page))}
                        />
                    )}
                </section>
            </div>
        </>
    )
}

export default ProductExplorer;